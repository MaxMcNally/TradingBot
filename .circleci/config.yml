version: 2.1

# Define reusable jobs
jobs:
  # Install dependencies and cache them
  install-dependencies:
    docker:
      - image: cimg/node:20.19
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: Install root dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Install client dependencies
          command: cd client && yarn install --frozen-lockfile
      - run:
          name: Install API dependencies
          command: cd api && yarn install --frozen-lockfile
      - save_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - client/node_modules
            - api/node_modules

  # Test backend
  test-backend:
    docker:
      - image: cimg/node:20.19
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: Install root dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Install API dependencies
          command: cd api && yarn install --frozen-lockfile
      - run:
          name: Run backend tests with coverage
          command: cd api && yarn test:coverage
      - store_artifacts:
          path: api/coverage
          destination: api-coverage

  # Test frontend
  test-frontend:
    docker:
      - image: cimg/node:20.19
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: Install root dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Install client dependencies
          command: cd client && yarn install --frozen-lockfile
      - run:
          name: Run frontend tests with coverage
          command: cd client && yarn test:coverage
      - store_artifacts:
          path: client/coverage
          destination: client-coverage

  # Lint code
  lint:
    docker:
      - image: cimg/node:20.19
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: Install root dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Install client dependencies
          command: cd client && yarn install --frozen-lockfile
      - run:
          name: Install API dependencies
          command: cd api && yarn install --frozen-lockfile
      - run:
          name: Run linting
          command: yarn lint --max-warnings 1000

  # Build Docker images
  build-images:
    docker:
      - image: cimg/node:20.19
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build API image
          command: docker build -t tradingbot-api .
      - run:
          name: Build client image
          command: docker build -t tradingbot-client -f client/Dockerfile client/

  # Run database migrations for QA
  migrate-qa-database:
    docker:
      - image: cimg/node:20.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Install API dependencies
          command: cd api && yarn install --frozen-lockfile
      - run:
          name: Set QA Database Environment Variables
          command: |
            echo "Setting QA database environment variables..."
            export DATABASE_URL=$QA_DATABASE_URL
            export NODE_ENV=qa
            echo "DATABASE_URL is set: $([ -n "$DATABASE_URL" ] && echo "YES" || echo "NO")"
      - run:
          name: Run QA Database Migrations
          command: |
            echo "ðŸ”„ Running database migrations for QA environment..."
            yarn migrate:run
      - run:
          name: Verify QA Migration Status
          command: |
            echo "ðŸ“Š Checking migration status..."
            yarn migrate:status

  # Deploy to Railway QA environment
  deploy-railway-qa:
    docker:
      - image: cimg/node:20.0
    steps:
      - checkout
      - run:
          name: Install Railway CLI
          command: npm install @railway/cli
      - run:
          name: Set Railway Environment Variables
          command: |
            echo "Setting Railway environment variables..."
            echo "RAILWAY_TOKEN is set: $([ -n "$RAILWAY_TOKEN" ] && echo "YES" || echo "NO")"
            echo "RAILWAY_PROJECT_ID is set: $([ -n "$RAILWAY_PROJECT_ID" ] && echo "YES" || echo "NO")"
            echo "RAILWAY_TOKEN length: ${#RAILWAY_TOKEN}"
            echo "RAILWAY_TOKEN starts with: ${RAILWAY_TOKEN:0:10}..."
            export RAILWAY_TOKEN=$RAILWAY_TOKEN
            export RAILWAY_PROJECT_ID=$RAILWAY_PROJECT_ID
            echo "Environment variables exported successfully"
      - run:
          name: Deploy to Railway QA
          command: |
            echo "Deploying to Railway QA environment..."
            npx railway up --service api-qa
      - run:
          name: Set QA environment variables
          command: |
            npx railway variables --set "NODE_ENV=QA" --service api-qa
            npx railway variables --set "TRADING_MODE=paper" --service api-qa
            npx railway variables --set "LOG_LEVEL=debug" --service api-qa
            npx railway variables --set "ENVIRONMENT=qa" --service api-qa
            npx railway variables --set "DEBUG=true" --service api-qa
            npx railway variables --set "JWT_SECRET=$JWT_SECRET" --service api-qa
            npx railway variables --set "SESSION_SECRET=$SESSION_SECRET" --service api-qa
            npx railway variables --set "DATABASE_URL=$QA_DATABASE_URL" --service api-qa
      - run:
          name: QA Deployment Complete
          command: |
            echo "âœ… QA API deployment completed successfully!"
            echo "Check Railway dashboard for deployment URL: https://railway.app/dashboard"

  # Deploy client to Railway QA environment
  deploy-client-railway-qa:
    docker:
      - image: cimg/node:20.0
    steps:
      - checkout
      - run:
          name: Install Railway CLI
          command: npm install @railway/cli
      - run:
          name: Set Railway Environment Variables
          command: |
            echo "Setting Railway environment variables..."
            export RAILWAY_TOKEN=$RAILWAY_TOKEN
            export RAILWAY_PROJECT_ID=$RAILWAY_PROJECT_ID
      - run:
          name: Deploy Client to Railway QA
          command: |
            echo "Deploying client to Railway QA environment..."
            npx railway up --service client-qa
      - run:
          name: Client QA Deployment Complete
          command: |
            echo "âœ… Client QA deployment completed successfully!"
            echo "Check Railway dashboard for deployment URL: https://railway.app/dashboard"

  # Run database migrations for Production
  migrate-production-database:
    docker:
      - image: cimg/node:20.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Install API dependencies
          command: cd api && yarn install --frozen-lockfile
      - run:
          name: Set Production Database Environment Variables
          command: |
            echo "Setting production database environment variables..."
            export DATABASE_URL=$PROD_DATABASE_URL
            export NODE_ENV=production
            echo "DATABASE_URL is set: $([ -n "$DATABASE_URL" ] && echo "YES" || echo "NO")"
      - run:
          name: Run Production Database Migrations
          command: |
            echo "ðŸ”„ Running database migrations for production environment..."
            yarn migrate:run
      - run:
          name: Verify Production Migration Status
          command: |
            echo "ðŸ“Š Checking migration status..."
            yarn migrate:status

  # Deploy to Railway production environment
  deploy-railway-production:
    docker:
      - image: cimg/node:20.0
    steps:
      - checkout
      - run:
          name: Install Railway CLI
          command: npm install @railway/cli
      - run:
          name: Set Railway Environment Variables
          command: |
            echo "Setting Railway environment variables..."
            echo "RAILWAY_TOKEN is set: $([ -n "$RAILWAY_TOKEN" ] && echo "YES" || echo "NO")"
            echo "RAILWAY_PROJECT_ID is set: $([ -n "$RAILWAY_PROJECT_ID" ] && echo "YES" || echo "NO")"
            echo "RAILWAY_TOKEN length: ${#RAILWAY_TOKEN}"
            echo "RAILWAY_TOKEN starts with: ${RAILWAY_TOKEN:0:10}..."
            export RAILWAY_TOKEN=$RAILWAY_TOKEN
            export RAILWAY_PROJECT_ID=$RAILWAY_PROJECT_ID
            echo "Environment variables exported successfully"
      - run:
          name: Deploy to Railway Production
          command: |
            echo "Deploying to Railway production environment..."
            echo "Current working directory: $(pwd)"
            echo "Checking Railway CLI version:"
            npx railway --version
            echo "Deploying to Railway production environment:"
            npx railway up --service api
      - run:
          name: Set production environment variables
          command: |
            npx railway variables --set "NODE_ENV=production" --service api
            npx railway variables --set "TRADING_MODE=paper" --service api
            npx railway variables --set "LOG_LEVEL=info" --service api
            npx railway variables --set "JWT_SECRET=$JWT_SECRET" --service api
            npx railway variables --set "SESSION_SECRET=$SESSION_SECRET" --service api
            npx railway variables --set "DATABASE_URL=$PROD_DATABASE_URL" --service api
      - run:
          name: Production Deployment Complete
          command: |
            echo "âœ… Production API deployment completed successfully!"
            echo "Check Railway dashboard for deployment URL: https://railway.app/dashboard"

  # Deploy client to Railway production environment
  deploy-client-railway-production:
    docker:
      - image: cimg/node:20.0
    steps:
      - checkout
      - run:
          name: Install Railway CLI
          command: npm install @railway/cli
      - run:
          name: Set Railway Environment Variables
          command: |
            echo "Setting Railway environment variables..."
            export RAILWAY_TOKEN=$RAILWAY_TOKEN
            export RAILWAY_PROJECT_ID=$RAILWAY_PROJECT_ID
      - run:
          name: Deploy Client to Railway Production
          command: |
            echo "Deploying client to Railway production environment..."
            npx railway up --service client
      - run:
          name: Client Production Deployment Complete
          command: |
            echo "âœ… Client production deployment completed successfully!"
            echo "Check Railway dashboard for deployment URL: https://railway.app/dashboard"

# Define workflows
workflows:
  # Main branch workflow - Deploy to QA after PR merge
  main:
    jobs:
      - install-dependencies
      - test-backend:
          requires:
            - install-dependencies
      - test-frontend:
          requires:
            - install-dependencies
      - lint:
          requires:
            - install-dependencies
      - build-images:
          requires:
            - test-backend
            - test-frontend
            - lint
      - migrate-qa-database:
          requires:
            - build-images
          context: tradebot-qa
      - deploy-railway-qa:
          requires:
            - migrate-qa-database
          context: tradebot-qa
      - deploy-client-railway-qa:
          requires:
            - build-images
          context: tradebot-qa

  # Production release pipeline - Deploy to production on GitHub releases
  release:
    jobs:
      - install-dependencies:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-backend:
          requires:
            - install-dependencies
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-frontend:
          requires:
            - install-dependencies
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - lint:
          requires:
            - install-dependencies
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-images:
          requires:
            - test-backend
            - test-frontend
            - lint
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - migrate-production-database:
          requires:
            - build-images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context: tradebot-prod
      - deploy-railway-production:
          requires:
            - migrate-production-database
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context: tradebot-prod
      - deploy-client-railway-production:
          requires:
            - build-images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context: tradebot-prod

# Define contexts for environment variables
contexts:
  - tradebot-qa
  - tradebot-prod
